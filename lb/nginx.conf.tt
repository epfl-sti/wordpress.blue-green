[% PERL %]

# "blue-green" deployment scheme for the Web STI stack
#
# This template renders the nginx.conf file, picking up either "green" or blue"
# as the back-end server depending on the contents of /lb/MASTER and the value
# of $ARGV[1] (either "PROD" or "DEV").

use strict;
use warnings; no warnings "redefine";

use PoorMansFileSlurp;
use PoorMansLog4Perl;

die unless defined $ARGV[1];
our $role = $ARGV[1] =~ m/prod/i ? 'prod' : 'backup';

our $color;
do {
  my $active_color = read_file("/lb/MASTER");
  my %color2role;
  if ($active_color =~ m/blue/i) {
    %color2role = ('prod' => 'blue', 'backup' => 'green');
  } elsif ($active_color =~ m/green/i) {
    %color2role = ('prod' => 'green', 'backup' => 'blue');
  } else {
    LOGDIE "Unable to interpret contents of /lb/MASTER";
  }
  $color = $color2role{$role};
};

our $has_lua = (-f "/usr/share/nginx/modules/ngx_http_lua_module.so");

[% END %]

[% PERL %]
if ($has_lua) {
[% END %]
load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;
[% PERL %]
}  # if ($has_lua)
[% END %]

worker_processes  5;
events {
  worker_connections  4096;  ## Default: 1024
}

http {
[% PERL %]
if ($has_lua) {
[% END %]
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path "/usr/local/share/lua/5.1/nginx/?.lua";
init_by_lua_block {
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
}
log_by_lua_block {
  local host = ngx.var.host:gsub("^www.", "")
  metric_requests:inc(1, {host, ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
}

[% PERL %]
}  # if ($has_lua)
[% END %]

    server {
        listen 443;
        ssl on;
        ssl_certificate        /etc/ssl/sti.epfl.ch.crt;
        ssl_certificate_key    /etc/ssl/sti.epfl.ch.key;

        proxy_connect_timeout   1s;
        proxy_send_timeout   10s;

        location = /lb/50x.html {
            internal;
            root /;
        }

        location / {
            proxy_set_header HOST $host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-Proto HTTPS;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_pass https://httpd.jahia2wp[% color %]_default;
            add_header X-Favorite-Color [% color %];

            error_page 500 /lb/50x.html;
            error_page 501 /lb/50x.html;
            error_page 502 /lb/50x.html;
            error_page 503 /lb/50x.html;
            error_page 504 /lb/50x.html;
        }
    }

[% PERL %]
if ($has_lua) {
[% END %]

  # Prometheus exporter for the stats in nginx
  server {
    listen 9113;
    location /metrics {
      content_by_lua_block {
        metric_connections:set(ngx.var.connections_reading, {"reading"})
        metric_connections:set(ngx.var.connections_waiting, {"waiting"})
        metric_connections:set(ngx.var.connections_writing, {"writing"})
        prometheus:collect()
      }
    }
  }
[% PERL %]
}  # if ($has_lua)
[% END %]

  # A small proxy to let Prometheus scrape the /metrics of
  # the WordPress instances
  # Inspired from https://github.com/prometheus/prometheus/issues/1724
  server {
    listen 8080;
    proxy_connect_timeout   1s;
    proxy_send_timeout   10s;

    location /blue/metrics {
      proxy_set_header Host sti-test.epfl.ch;
      proxy_pass http://httpd.jahia2wpblue_default/metrics;
    }
    location /green/metrics {
      proxy_set_header Host sti-test.epfl.ch;
      proxy_pass http://httpd.jahia2wpgreen_default/metrics;
    }
  }
}
